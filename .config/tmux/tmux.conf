set  -g  aggressive-resize on
set  -g  base-index 1
set  -g  default-command "$SHELL"
set  -g  default-terminal "xterm-256color"
set  -g  display-panes-time 5000
set  -g  display-time 5000
set  -g  focus-events on
set  -g  history-limit 1000000
set  -g  monitor-activity off
set  -g  mouse on
set  -g  prefix-timeout 5000
set  -g  renumber-windows on
set  -g  set-titles on
set  -g  status off
set  -g  status-keys vi
set  -g  status-position top
set  -g  visual-activity off
set  -ga terminal-overrides ',xterm-256color:Tc'
set  -s  escape-time 0
setw -g  automatic-rename on
setw -g  mode-keys vi
setw -g  pane-base-index 1

# Title templates
%hidden _status_pane_mode="#{?pane_in_mode,[#{pane_mode}] ,}"
%hidden _status_session="#{session_name}#{?session_marked,M,}"
%hidden _status_window="#{active_window_index}#{?window_active,,}#{?window_activity_flag,##,}#{?window_bell_flag,!,}#{?window_last_flag,-,}#{?window_marked_flag,M,}#{?window_silence_flag,~,}#{?window_zoomed_flag,Z,}"
%hidden _status_pane="#{pane_index}#{?pane_marked,M,}"
%hidden _status_pane_title="#{user}@#{host} - #{pane_title}"

# Terminal window title
set -g set-titles-string "${_status_pane_mode}[${_status_session}:${_status_window}:${_status_pane}] ${_status_pane_title}"

# Status bar
set -g status-bg black
set -g status-fg darkgray

# Status left
set -g status-left "[${_status_session}:${_status_window}:${_status_pane}] "
set -g status-left-length 12

# Window status
set -g window-status-current-style 'fg=white'
set -g window-status-bell-style 'fg=yellow'

# Status right
set -g status-right "${_status_pane_title}"
set -g status-right-length 60

# Pane border
set -g pane-border-style 'bg=default fg=brightblack'
set -g pane-active-border-style 'bg=default fg=cyan'
set -g pane-border-status off
set -g pane-border-lines single
set -g pane-border-format "#[align=left]#[fg=brightblack]#{?pane_active,#[fg=cyan],#[fg=brightblack]}#{=/#{e|-:#{pane_width},18}/.. : ${_status_pane_mode}${_status_pane_title}} #[align=right] ${_status_session}:${_status_window}:${_status_pane} "

# Hooks
set-hook -g @toggle-status {
  if -b "[ \#{session_windows} -eq 1 ]" {
    set status off
  } {
    set status on
  }
}

set-hook -g @toggle-pane-border-status {
  if -b "[ \#{window_panes} -eq 1 ]" {
    set pane-border-status off
  } {
    set pane-border-status top
  }
}

set-hook -g after-new-session {
  set-hook -R @toggle-status
  set-hook -R @toggle-pane-border-status
}

set-hook -g after-new-window {
  set-hook -R @toggle-status
  set-hook -R @toggle-pane-border-status
}

set-hook -g after-kill-pane {
  set-hook -R @toggle-status
  set-hook -R @toggle-pane-border-status
}

set-hook -g after-split-window {
  set-hook -R @toggle-status
  set-hook -R @toggle-pane-border-status
}

set-hook -g pane-exited {
  set-hook -R @toggle-status
  set-hook -R @toggle-pane-border-status
}

# Key bindings
set -g prefix C-Space

unbind -T prefix C-b
bind -T prefix -N "Send prefix (user)" C-Space send-prefix
## Claimed (prefix): C-Space
## Freed (prefix): C-b

bind -T prefix -N "Reload tmux.conf (user)" R {
  source-file ~/.config/tmux/tmux.conf
  display 'tmux.conf reloaded'
}
## Claimed (prefix): R

unbind -T prefix t # Default (prefix): Show a clock
bind -T prefix -N "Toggle status line (user)" t set status
## Replaced (prefix): t

## Swap: <prefix>-\" to <prefix>-v for splitting window vertically
unbind -T prefix \" # Default: Split window vertically
bind -T prefix -N "Split window vertically (user)" v split-window
## Claimed (prefix): v
## Freed (prefix): \"

## Swap: <prefix>-\% to <prefix>-o for splitting window horizontally
unbind -T prefix \% # Default (prefix): Split window horizontally
unbind -T prefix o # Default (prefix): Select next pane
bind -T prefix -N "Split window horizontally (user)" o split-window -h
bind -T prefix -N "Select the next pane (user)" \% select-pane -t :.+
## Replaced (prefix): \%, o

unbind -T prefix l # Default (prefix): Select the previously current window
unbind -T prefix Left # Default (prefix): Select the pane to the left of the active pane
unbind -T prefix Down # Default (prefix): Select the pane below the active pane
unbind -T prefix Up # Default (prefix): Select the pane above the active pane
unbind -T prefix Right # Default (prefix): Select the pane to the right of the active pane
bind -T prefix -N "Select the previously current window (user)" \" last-window
bind -T prefix -N "Select the pane to the left of the active pane (user)" -r h select-pane -L
bind -T prefix -N "Select the pane below the active pane (user)" -r j select-pane -D
bind -T prefix -N "Select the pane above the active pane (user)" -r k select-pane -U
bind -T prefix -N "Select the pane to the right of the active pane (user)" -r l select-pane -R
## Claimed (prefix): h, j, k
## Replaced (prefix): l
## Freed (prefix): Left, Down, Up, Right
## Re-claimed (prefix): "\

unbind -T prefix C-Up # Default (prefix): Resize the pane up
unbind -T prefix C-Down # Default (prefix): Resize the pane down
unbind -T prefix C-Left # Default (prefix): Resize the pane left
unbind -T prefix C-Right # Default (prefix): Resize the pane right
unbind -T prefix M-Up # Default (prefix): Resize the pane up by 5
unbind -T prefix M-Down # Default (prefix): Resize the pane down by 5
unbind -T prefix M-Left # Default (prefix): Resize the pane left by 5
unbind -T prefix M-Right # Default (prefix): Resize the pane right by 5
bind -T prefix -N "Resize the pane up by 2 (user)" -r C-k resize-pane -U 2
bind -T prefix -N "Resize the pane down by 2 (user)" -r C-j resize-pane -D 2
bind -T prefix -N "Resize the pane left by 4 (user)" -r C-h resize-pane -L 4
bind -T prefix -N "Resize the pane right by 4 (user)" -r C-l resize-pane -R 4
## Claimed (prefix): C-k, C-j, C-h, C-l
## Freed (prefix): C-Left, C-Down, C-Up, C-Right, M-Left, M-Down, M-Up, M-Right

unbind -T prefix S-Up # Default (prefix): Move the visible part of the window up
unbind -T prefix S-Down # Default (prefix): Move the visible part of the window down
unbind -T prefix S-Left # Default (prefix): Move the visible part of the window left
unbind -T prefix S-Right # Default (prefix): Move the visible part of the window right
bind -T prefix -N "Move the visible part of the window up (user)" -r S-k refresh-client -U 10
bind -T prefix -N "Move the visible part of the window down (user)" -r S-j refresh-client -D 10
bind -T prefix -N "Move the visible part of the window left (user)" -r S-h refresh-client -L 10
bind -T prefix -N "Move the visible part of the window right (user)" -r S-l refresh-client -R 10
## Claimed (prefix): S-Up, S-Down, S-Left, S-Right
## Freed (prefix): S-Up, S-Down, S-Left, S-Right

bind -T copy-mode-vi -N "Copy selection (user)" y {
  send -X copy-selection -x
}
# Claimed (copy-mode-vi): y

bind -N "Select pane and clear selection (user)" -T copy-mode-vi MouseDown1Pane {
  select-pane
  send -X clear-selection
}
# Replaced (copy-mode-vi): MouseDown1Pane

bind -N "Open pane copy in editor split (user)" -T prefix e run-shell "$HOME/.local/share/tmux/editor_pane_copy"
# Claimed (prefix): e

# Staying in the copy-mode-vi after mouse events
unbind -T copy-mode-vi MouseDragEnd1Pane # Default (copy-mode-vi): copy selection, unselect
unbind -T copy-mode-vi DoubleClick1Pane  # Default (copy-mode-vi): select and copy word, unselect
unbind -T copy-mode-vi TripleClick1Pane  # Default (copy-mode-vi): select and copy line, unselect
## Freed (copy-mode-vi): MouseDragEnd1Pane, DoubleClick1Pane, TripleClick1Pane
