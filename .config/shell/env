#!/usr/bin/env sh

# fn: detect if given command is executable
is_exec() { [ "$(command -v "$1")" ]; }

# default macOS homebrew dir. path
prefix="$(brew --prefix 2> /dev/null)"
export BREW_PREFIX="${prefix:-/opt/homebrew}"

# determine if GNU utilities have been installed with homebrew
HAS_BREW_GNUBIN=""
if [ -d "$BREW_PREFIX/opt/coreutils/libexec/gnubin" ]; then
  export HAS_BREW_GNUBIN="1"
fi

# use the GNU utils on macOS
if [ "$HAS_BREW_GNUBIN" ]; then
  PATH="$BREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
  export MANPATH="$BREW_PREFIX/opt/coreutils/libexec/gnuman:$MANPATH"
fi

# XDG base directories
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

# initialize homebrew
if [ -f "${BREW_PREFIX}/bin/brew" ]; then
  eval "$("${BREW_PREFIX}/bin/brew" shellenv)"
fi

# set local bin PATH
PATH="$HOME/.local/bin:$PATH"

# set user AppImages location
export APPIMAGE_DATA_HOME="$HOME/.local/opt/appimage"
PATH="$APPIMAGE_DATA_HOME:$PATH"

# set language
if [ -z "${LANG:-""}" ]; then
  export LANG='en_US.UTF-8'
fi

# set locale
if [ -f "/etc/profile.d/locale.sh" ]; then
  unset LANG
  . "/etc/profile.d/locale.sh"
fi

# set PAGER
export PAGER="less"

# set TERMINAL
export TERMINAL="terminal"

if is_exec "nvim"; then
  # configure nvim as EDITOR, MANPAGER
  export EDITOR="nvim"
  export MANWIDTH="999"
  export MANPAGER="nvim +Man!"
else
  # or set a different avail. EDITOR
  for editor in "vim" "vi" "nano"; do
    is_exec "$editor" && export EDITOR="$editor" && break
  done
fi

# GUI envrironment variables script path
export GUI_ENV="${XDG_CONFIG_HOME:-$HOME/.config}/shell/gui"

# configure fzf
. "$GUI_ENV"

export FZF_DEFAULT_OPTS=\
"--color=fg:${GUI_COLOR_FOREGROUND:-""},fg+:${GUI_COLOR_FOREGROUND:-""},bg:${GUI_COLOR_BACKGROUND:-""},bg+:${GUI_COLOR_BACKGROUND:-""},hl:${GUI_COLOR_A:-""},hl+:${GUI_COLOR_D:-""},info:${GUI_COLOR_D:-""},marker:${GUI_COLOR_D:-""},prompt:${GUI_COLOR_D:-""},spinner:${GUI_COLOR_D:-""},pointer:${GUI_COLOR_D:-""},header:${GUI_COLOR_A:-""},border:${GUI_COLOR_8:-""},label:${GUI_COLOR_D:-""},query:${GUI_COLOR_FOREGROUND:-""} "

# configure makepkg
if is_exec "nproc"; then
  proc_units_no="$(nproc)"

  if [ "$proc_units_no" ]; then
    export MAKEFLAGS="-j${proc_units_no}"
  fi
fi

# configure X11
export XINITRC="${XDG_CONFIG_HOME:-$HOME/.config}/xinit/xinitrc"
export XAUTHORITY="$XDG_RUNTIME_DIR/xauthority"

# configure GTK 2.0
export GTK2_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-2.0/gtkrc"

# configure GTK 3.0, 4.0
export GTK_THEME="Adwaita:dark"

# configure Qt
export QT_STYLE_OVERRIDE="adwaita-dark"

# configure GNU readline
export INPUTRC="${XDG_CONFIG_HOME:-$HOME/.config}/readline/inputrc"

# configure GNU screen
export SCREENRC="${XDG_CONFIG_HOME:-$HOME/.config}/screen/screenrc"

# configure node
export NODE_REPL_HISTORY="${XDG_CACHE_HOME:-$HOME/.cache}/node/repl_history"

# configure python
export PYTHONSTARTUP="${XDG_CONFIG_HOME:-$HOME/.config}/python/pythonrc.py"

# configure ipython
export IPYTHONDIR="${XDG_CONFIG_HOME:-$HOME/.config}/ipython"

# configure pyenv
export PYENV_ROOT="${XDG_DATA_HOME:-$HOME/.local/share}/pyenv"

# configure pipx
export PIPX_USE_EMOJI="0"

# configure jupyter
export JUPYTER_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/jupyter"

# configure keras
export KERAS_HOME="${XDG_STATE_HOME:-$HOME/.local/state}/keras"

# configure less
export LESS="--LINE-NUMBERS --LONG-PROMPT --RAW-CONTROL-CHARS --clear-screen --HILITE-UNREAD --incsearch --ignore-case --jump-target=.5\$ --line-num-width=5\$ --mouse --status-column --tabs=2\$ --tilde --use-color --wheel-lines=3\$ --wordwrap --color=P-\$ --color=NK\$ --color=RK\$ --color=E-\$"
export LESSHISTFILE="-"
export LESSOPEN="|${XDG_DATA_HOME:-$HOME/.local/share}/less/filter %s"

# configure sqlite
export SQLITE_HISTORY="${XDG_CACHE_HOME:-$HOME/.cache}/sqlite/history"

# configure go
export GOPATH="${XDG_DATA_HOME:-$HOME/.local/share}/go"

# configure cargo
export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
PATH="$CARGO_HOME/bin:$PATH"

# configure volta
export VOLTA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/volta"
PATH="$VOLTA_HOME/bin:$PATH"
export VOLTA_FEATURE_PNPM="1"

# configure homebrew
export HOMEBREW_NO_ANALYTICS="1"
export HOMEBREW_NO_EMOJI="1"

# configure zsh
export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"

# configure WSL
if [ -f "/proc/version" ] && grep -q "microsoft" "/proc/version"; then
  xdg_runtime_dir="$HOME/.local/state/xdg_runtime"

  if [ ! -d "$xdg_runtime_dir" ]; then
    mkdir -p "$xdg_runtime_dir"
    chmod "0700" "$xdg_runtime_dir"
  fi

  if [ -r "$xdg_runtime_dir" ]; then
    export XDG_RUNTIME_DIR="$xdg_runtime_dir"
  fi
fi
