#!/usr/bin/env sh
set -eu
IFS_="$IFS"

script="$(basename "$0")"
msg_usage="${script} usage: no arguments (same as all) OR \"\"|all|area|output|output_focused|window|window_focused|workspace|workspace_focused [DELAY] OR [--help|-h]"

case "${1:-""}" in
  "--help"|"-h")
    echo "$msg_usage"
    exit
  ;;
esac

path_dir="${HOME}/scr"
path_out="${path_dir}/$(date "+%s").png"

capture_mode="${1:-"all"}"
delay="${2:-"0"}"

mkdir -p "$path_dir"

saved() {
  (
    if [ "$(notify-send "Screenshot saved." "$path_out" --app-name="$script" --action="LOCATE=Locate" --wait)" ]; then
      file_manager_desktop "$path_out"
    fi
  ) 1>/dev/null 2>/dev/null & disown

  echo "${script}: Screenshot saved at ${path_out}"

  if [ "${WAYLAND_DISPLAY:-""}" ]; then
    printf '%s' "$path_out" | wl-copy
  fi

  if [ "${DISPLAY:-""}" ] && [ -z "${WAYLAND_DISPLAY:-""}" ]; then
    printf '%s' "$path_out" | xclip -sel "clipboard"
  fi

  exit
}

failed() {
  i3blocks_signal 1>/dev/null 2>/dev/null & disown

  notify-send "Taking screenshot failed." --app-name="$script" --urgency="critical" 1>/dev/null 2>/dev/null & disown

  echo "${script}: Taking screenshot failed." 1>&2

  exit "2"
}

not_implemented() {
  msg="Not implemented (${1:-""}): ${2:-""}"

  echo "$msg" 1>&2

  notify-send "$msg" --app-name="$script" --urgency="critical" 1>/dev/null 2>/dev/null & disown

  exit "5"
}


countdown() {
  if [ "$delay" = "0" ]; then
    return
  fi

  time="$delay"

  echo "$time"

  while [ "$time" -gt "0" ]; do
    time="$((time - 1))"

    sleep "1"

    echo "$time"
  done
}

if [ "${WAYLAND_DISPLAY:-""}" ]; then
  if [ "$(pidof "grim")" ] || [ "$(pidof "dulcepan")" ]; then
    exit "3"
  fi

  ptr_coord=""
  jq_rect_map='"\(.x),\(.y) \(.width)x\(.height)"'

  case "${capture_mode:-""}" in
    "all")
      countdown

      if ! grim "$path_out"; then
        failed
      fi

      saved

    ;;
    "area")
      countdown

      if ! dulcepan -f "png" -o "$path_out"; then
        failed
      fi

      saved
    ;;
    "output")
      ptr_coord="$(set +e; swaymsg -t "get_outputs" | jq -r ".. | select(.active?).rect | ${jq_rect_map}" | slurp; set -e)"
    ;;
    "output_focused")
      ptr_coord="$(set +e; swaymsg -t "get_outputs" | jq -r ".. | select(.focused?).rect | ${jq_rect_map}"; set -e)"
    ;;
    "window")
      ptr_coord="$(set +e; swaymsg -t "get_tree" | jq -r ".. | select(.pid? and .visible?).rect | ${jq_rect_map}" | slurp; set -e)"
    ;;
    "window_focused")
      ptr_coord="$(set +e; swaymsg -t "get_tree" | jq -j ".. | select(.type? and .focused?).rect | ${jq_rect_map}"; set -e)"
    ;;
    "workspace")
      ptr_coord="$(set +e; swaymsg -t "get_workspaces" | jq -r ".. | select(.visible? and .type == \"workspace\").rect | ${jq_rect_map}" | slurp; set -e)"
    ;;
    "workspace_focused")
      ptr_coord="$(set +e; swaymsg -t "get_workspaces" | jq -r ".. | select(.focused? and .type == \"workspace\").rect | ${jq_rect_map}"; set -e)"
    ;;
    *)
      echo "$msg_usage" 1>&2
      exit "1"
    ;;
  esac

  if [ -z "$ptr_coord" ]; then
    notify-send "No screen area selected." --app-name="$script" --urgency="critical" 1>/dev/null 2>/dev/null & disown

    echo "${script}: No screen area selected." 1>&2

    exit "2"
  fi

  countdown

  if ! grim -g "$ptr_coord" "$path_out"; then
    failed
  fi

  saved
fi

if [ "${DISPLAY:-""}" ] && [ -z "${WAYLAND_DISPLAY:-""}" ]; then
  case "${capture_mode:-""}" in
    "all")
      if ! maim -d "$delay" -u "$path_out"; then
        failed
      fi
    ;;
    "area")
      if ! maim -d "$delay" -u --select "$path_out"; then
        failed
      fi
    ;;
    "output")
      not_implemented "X11" "${1:-""}"
    ;;
    "output_focused")
      mouseloc="$(xdotool "getmouselocation")"

      m_x="${mouseloc##x:}"
      m_x="${m_x%% *}"

      m_y="${mouseloc##*y:}"
      m_y="${m_y%% *}"

      outputs="$(set +e; xrandr | grep " connected "; set -e)"

      o_coords=""

      IFS="
"
      for o in $outputs; do
        IFS="$IFS_"

        # o_name="${o%%" "*}"

        o_coords="${o##*" connected "}"
        o_coords="${o_coords##"primary "}"
        o_coords="${o_coords%%" "*}"

        o_width="${o_coords%%"x"*}"

        o_height="${o_coords##*"x"}"
        o_height="${o_height%%"+"*}"

        o_x_offset="${o_coords##"${o_width}x${o_height}+"}"
        o_x_offset="${o_x_offset%%"+"*}"

        o_y_offset="${o_coords##"${o_width}x${o_height}+${o_x_offset}+"}"

        if   [ "$m_x" -ge "$o_x_offset" ] \
          && [ "$m_x" -le "$((o_width + o_x_offset))" ] \
          && [ "$m_y" -ge "$o_y_offset" ] \
          && [ "$m_y" -le "$((o_height + o_y_offset))" ]
        then
          break
        fi
      done
      IFS="$IFS_"

      if ! maim -d "$delay" -u -g "$o_coords" "$path_out"; then
        failed
      fi
    ;;
    "window")
      not_implemented "X11" "${1:-""}"
    ;;
    "window_focused")
      if ! maim -d "$delay" -u --window "$(xdotool "getactivewindow")" "$path_out"; then
        failed
      fi
    ;;
    "workspace")
      not_implemented "X11" "${1:-""}"
    ;;
    "workspace_focused")
      not_implemented "X11" "${1:-""}"
    ;;
    *)
      echo "$msg_usage" 1>&2
      exit "1"
    ;;
  esac

  saved
fi

case "${1:-""}" in
  ""|"all"|"output"|"output_focused"|"window"|"window_focused"|"workspace"|"workspace_focused"|"area"|"stop")
    echo "Must be ran under X11 or Wayland." 1>&2
    exit "2"
  ;;
  *)
    echo "$msg_usage" 1>&2
    exit "1"
  ;;
esac
