#!/usr/bin/env sh
set -eu

if [ "${WAYLAND_DISPLAY:-""}" ]; then
  pid="$(swaymsg -t get_tree | \jq '.. | select(.type?) | select(.focused == true) | .pid')"

  if [ -z "$pid" ]; then
    exit "3"
  fi

  details_ps="$(ps --no-headers -p "${pid}" -o "comm,args")"

  if [ -z "$details_ps" ]; then
    exit "3"
  fi

  exec="$(echo "$details_ps" | awk '{ print $1 }')"
  # cmdline="$(echo "$details_ps" | awk '{ $1=""; print $0 }')"

  if [ "$(command -v "$exec")" ]; then
    exec "$exec"
  fi

  exit "1"
fi

if [ "${DISPLAY:-""}" ] && [ -z "${WAYLAND_DISPLAY:-""}" ]; then
  # Tries to execute focused X window program again to spawn a new window of it.
  # How:
  # 1. Reads WM_CLASS and WM_INSTANCE of the focused X window.
  # 2. Executes any known cases, where executable name from window's WM_CLASS is different than the WM_CLASS or the WM_INSTANCE or requires additional parameters. (Update this list as necessary!)
  # 3. If that falls through, checks if window's WM_CLASS and WM_INSTANCE are commands in current case or in lower case spelling and, if so, executes the first match.

  wm_class_wm_instance="$(xprop -id "$(xprop -root | sed -n 's/_NET_ACTIVE_WINDOW(WINDOW): window id # \(.*.\)$/\1/p')" | sed -n 's/WM_CLASS(STRING) = "\(.*.\)", "\(.*.\)"$/\1 \2/p')"

  wm_class="$(echo "$wm_class_wm_instance" | cut -d' ' -f1)"
  wm_instance="$(echo "$wm_class_wm_instance" | cut -d' ' -f2)"

  case $wm_class in
    "libreoffice") exec libreoffice "--$(echo "$wm_instance" | sed -n 's/libreoffice-\(.*.\)/\1/p')";;
    "libreoffice-"*) exec libreoffice "--$(echo "$wm_class" | sed -n 's/libreoffice-\(.*.\)/\1/p')";;
    "org.wezfurlong.wezterm") exec wezterm;;
    "mpv") exec mpv --player-operation-mode=pseudo-gui;;
  esac

  for i in "$wm_class" "$wm_instance"; do
    if [ "$(command -v "$i")" ]; then
      exec "$i"
    fi

    i_lc="$(echo "$i" | tr '[:upper:]' '[:lower:]')"

    if [ "$(command -v "$i_lc")" ]; then
      exec "$i_lc"
    fi
  done

  exit "1"
fi

exit "2"
