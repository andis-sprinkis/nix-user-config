#!/usr/bin/env sh

read_pw_input() {
  # Read concealed password input
  # Credit: St√©phane Chazelas - https://unix.stackexchange.com/a/223000

  PW_INPUT="$(
    # always read from the tty even when redirected:
    exec < /dev/tty || exit # || exit only needed for bash

    # save current tty settings:
    tty_settings=$(stty -g) || exit

    # schedule restore of the settings on exit of that subshell
    # or on receiving SIGINT or SIGTERM:
    trap 'stty "$tty_settings"' EXIT INT TERM

    # disable terminal local echo
    stty -echo || exit

    # prompt on tty
    printf "Password: " > /dev/tty

    # read password as one line, record exit status
    IFS= read -r password; ret=$?

    # display a newline to visually acknowledge the entered password
    echo > /dev/tty

    # return the password for $PW_INPUT
    printf '%s\n' "$password"
    exit "$ret"
  )"
}

# Prompt with user error handling for concealed password input

confirm_pw_input() {
  password_1=
  password_2=

  read_pw_input && password_1=$PW_INPUT

  if [ -z "$password_1" ]; then
    unset $password_1
    unset $password_2
    unset $PW_INPUT
    echo; echo "Input error - password must not be empty. Try again!"
    confirm_pw_input $1 && return 0; return 1
  fi

  echo; echo "Repeat the password."
  read_pw_input && password_2=$PW_INPUT

  if [ -z "$password_2" ]; then
    unset $password_1
    unset $password_2
    unset $PW_INPUT
    echo; echo "Input error - password must not be empty. Try again!"
    confirm_pw_input $1 && return 0; return 1
  fi

  if [ ! "$password_1" = "$password_2" ]; then
    unset $password_1
    unset $password_2
    unset $PW_INPUT
    echo; echo "Input error - passwords must match. Try again!"
    confirm_pw_input $1 && return 0; return 1
  fi

  unset $password_1
  unset $password_2
  return 0
}
