#!/usr/bin/env sh
set -eu

script="$(basename "$0")"
msg_usage="${script} usage: no arguments (same as area) OR \"\"|all|area|output|output_focused|window|window_focused|workspace|workspace_focused [DELAY] OR stop OR [--help|-h]"

case "${1:-""}" in
  "--help"|"-h")
    echo "$msg_usage"
    exit
  ;;
esac

path_dir="${HOME}/scr"
path_out="${path_dir}/$(date "+%s").mp4"

capture_mode="${1:-"area"}"
delay="${2:-"0"}"

i3blocks_signal() {
  if [ "${1:-""}" = "wait" ]; then sleep "1"; fi

  if [ "$(pidof "i3blocks")" ]; then
    pkill "-SIGRTMIN+7" "i3blocks" 1>/dev/null 2>/dev/null & disown
  fi
}

saved() {
  i3blocks_signal 1>/dev/null 2>/dev/null & disown

  (
    if [ "$(notify-send "Screen recording saved." "${path_out}" --app-name="${script}" --action="LOCATE=Locate" --wait)" ]; then
      file_manager_desktop "$path_out"
    fi
  ) 1>/dev/null 2>/dev/null & disown

  echo "${script}: Screen recording saved at ${path_out}"
}

failed() {
  i3blocks_signal 1>/dev/null 2>/dev/null & disown

  notify-send "Screen recording failed." --app-name="${script}" --urgency="critical" 1>/dev/null 2>/dev/null & disown

  echo "${script}: Screen recording failed." 1>&2

  exit "2"
}

not_implemented() {
  msg="Not implemented (${1:-""}): ${2:-""}"

  echo "${script}: $msg" 1>&2

  notify-send "$msg" --app-name="${script}" --urgency="critical" 1>/dev/null 2>/dev/null & disown

  exit "5"
}

countdown() {
  if [ "$delay" = "0" ]; then
    return
  fi

  time="$delay"

  echo "$time"

  while [ "$time" -gt "0" ]; do
    time="$((time - 1))"

    sleep "1"

    echo "$time"
  done

  i3blocks_signal "wait" 1>/dev/null 2>/dev/null & disown
}

if [ "${WAYLAND_DISPLAY:-""}" ]; then
  case "$capture_mode" in
    "stop")
      set +e
      pkill -SIGINT -f "wf-recorder"
      pkill -SIGINT -f "slurp"
      set -e

      i3blocks_signal 1>/dev/null 2>/dev/null & disown

      exit "0"
    ;;
    "all"|"area"|"output"|"output_focused"|"window"|"window_focused"|"workspace"|"workspace_focused")
      if [ "$(pidof "wf-recorder")" ] || [ "$(pidof "slurp")" ]; then
        exit "3"
      fi

      ptr_coord=""
      jq_rect_map='"\(.x),\(.y) \(.width)x\(.height)"'

      case "$capture_mode" in
        "all")
          not_implemented "Wayland" "$capture_mode"
        ;;
        "area")
          ptr_coord="$(set +e; slurp; set -e)"
        ;;
        "output")
          ptr_coord="$(set +e; swaymsg -t "get_outputs" | jq -r ".. | select(.active?).rect | ${jq_rect_map}" | slurp; set -e)"
        ;;
        "output_focused")
          ptr_coord="$(set +e; swaymsg -t "get_outputs" | jq -r ".. | select(.focused?).rect | ${jq_rect_map}"; set -e)"
        ;;
        "window")
          ptr_coord="$(set +e; swaymsg -t "get_tree" | jq -r ".. | select(.pid? and .visible?).rect | ${jq_rect_map}" | slurp; set -e)"
        ;;
        "window_focused")
          ptr_coord="$(set +e; swaymsg -t "get_tree" | jq -r ".. | select(.type? and .focused?).rect | ${jq_rect_map}"; set -e)"
        ;;
        "workspace")
          ptr_coord="$(set +e; swaymsg -t "get_workspaces" | jq -r ".. | select(.visible? and .type == \"workspace\").rect | ${jq_rect_map}" | slurp; set -e)"
        ;;
        "workspace_focused")
          ptr_coord="$(set +e; swaymsg -t "get_workspaces" | jq -r ".. | select(.focused? and .type == \"workspace\").rect | ${jq_rect_map}"; set -e)"
        ;;
      esac

      if [ -z "$ptr_coord" ]; then
        notify-send "No screen area selected." --app-name="${script}" --urgency="critical" 1>/dev/null 2>/dev/null & disown

        echo "${script}: No screen area selected." 1>&2

        exit "2"
      fi

      ptr_coord_x="${ptr_coord%,*}"
      ptr_coord_y="${ptr_coord#*,}"
      ptr_coord_y="${ptr_coord_y% *}"

      output="$(
        swaymsg -rt get_outputs | jq -r \
          ".[] | select((${ptr_coord_x} >= .rect.x) and (${ptr_coord_x} < .rect.x + .rect.width) and (${ptr_coord_y} >= .rect.y) and (${ptr_coord_y} < .rect.y + .rect.height))"
      )"

      output_name="$(echo "$output" | jq -r ".name")"
      output_transform="$(echo "$output" | jq -r ".transform")"

      rec_transpose=""

      case "$output_transform" in
        "180")
          rec_transpose="-F transpose=1"
        ;;
        "90")
          rec_transpose="-F transpose=2"
        ;;
      esac

      countdown

      case "$capture_mode" in
        "output")
          if ! wf-recorder --audio --codec=libx264rgb "$rec_transpose" --output="$output_name" --file="$path_out"; then
            failed
          fi
        ;;
        *)
          if ! wf-recorder --audio --codec=libx264rgb "$rec_transpose" --output="$output_name" --geometry="$ptr_coord" --file="$path_out"; then
            failed
          fi
        ;;
      esac

      saved

      printf '%s' "$path_out" | wl-copy

      exit
    ;;
    "-h"|"--help")
      echo "$msg_usage"
      exit "0"
    ;;
    *)
      echo "$msg_usage" 1>&2
      exit "1"
    ;;
  esac
fi

if [ "${DISPLAY:-""}" ] && [ -z "${WAYLAND_DISPLAY:-""}" ]; then
  case "${1:-""}" in
    ""|"all"|"output"|"output_focused"|"workspace"|"workspace_focused"|"window"|"window_focused"|"area"|"stop")
      not_implemented "X11" "${1:-""}"
    ;;
    "-h"|"--help")
      echo "$msg_usage"
      exit "0"
    ;;
    *)
      echo "$msg_usage" 1>&2
      exit "1"
    ;;
  esac
fi

case "${1:-""}" in
  "-h"|"--help")
    echo "$msg_usage"
    exit "0"
  ;;
  ""|"all"|"output"|"output_focused"|"workspace"|"workspace_focused"|"window"|"window_focused"|"area"|"stop")
    echo "Must be ran under X11 or Wayland." 1>&2
    exit "2"
  ;;
  *)
    echo "$msg_usage" 1>&2
    exit "1"
  ;;
esac
