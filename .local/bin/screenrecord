#!/usr/bin/env sh
set -eu

script="$(basename "$0")"
msg_usage="${script} usage: no arguments (same as --area) OR [--all|--output|--output-focused|--window|--window-focused|--area|--stop] OR [--help|-h]"

case "${1:-""}" in
  "--help"|"-h")
    echo "$msg_usage"
    exit
  ;;
esac

path_dir="${HOME}/scr"
path_out="${path_dir}/$(date "+%s").mp4"

i3blocks_signal() {
  if [ "$(pidof "i3blocks")" ]; then
    (
      if [ "${1:-""}" = "wait" ]; then
        sleep "0.5"
      fi

      pkill "-SIGRTMIN+7" "i3blocks"
    ) 1> "/dev/null" 2> "/dev/null" & disown
  fi
}

notify_saved() {
  if [ "$(notify-send "Screen-recording saved." "${path_out}" --app-name="${script}" --action="LOCATE=Locate" --wait)" ]; then
    file_manager_desktop "$path_out"
  fi
}

not_implemented() {
  echo "Not implemented (${1:-""}): ${2:-""}" 1>&2
  exit "5"
}

if [ "${WAYLAND_DISPLAY:-""}" ]; then
  if [ "${1:-""}" = "--stop" ]; then
    set +e
    pkill -SIGINT -f "wf-recorder"
    pkill -SIGINT -f "slurp"
    set -e

    i3blocks_signal "wait"

    exit "0"
  fi

  if [ "$(pidof "wf-recorder")" ] || [ "$(pidof "slurp")" ]; then
    exit "3"
  fi

  record() {
    ptr_coord=""

    case "$1" in
      "area")
        ptr_coord="$(set +e; slurp; set -e)"
      ;;
      "output")
        ptr_coord="$(set +e; swaymsg -t "get_outputs" | jq -r '.. | select(.active?).rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp; set -e)"
      ;;
      "window")
        ptr_coord="$(set +e; swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?).rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp; set -e)"
      ;;
      "window-focused")
        ptr_coord="$(set +e; swaymsg -t get_tree | jq -j '.. | select(.type? and .focused?).rect | "\(.x),\(.y) \(.width)x\(.height)"'; set -e)"
      ;;
    esac

    if [ -z "$ptr_coord" ]; then
      exit "0"
    fi

    ptr_coord_x="${ptr_coord%,*}"
    ptr_coord_y="${ptr_coord#*,}"
    ptr_coord_y="${ptr_coord_y% *}"

    output="$(
      swaymsg -rt get_outputs | jq -r \
        ".[] | select((${ptr_coord_x} >= .rect.x) and (${ptr_coord_x} < .rect.x + .rect.width) and (${ptr_coord_y} >= .rect.y) and (${ptr_coord_y} < .rect.y + .rect.height))"
    )"

    output_name="$(echo "$output" | jq -r ".name")"
    output_transform="$(echo "$output" | jq -r ".transform")"

    rec_transpose=""

    case "$output_transform" in
      "180")
        rec_transpose="-F transpose=1"
      ;;
      "90")
        rec_transpose="-F transpose=2"
      ;;
    esac

    (sleep "1" && i3blocks_signal) &

    case "$1" in
      "area"|"window"|"window-focused")
        wf-recorder --audio --codec=libx264rgb "$rec_transpose" --geometry="$ptr_coord" --file="$path_out"
      ;;
      "output")
        wf-recorder --audio --codec=libx264rgb "$rec_transpose" --output="$output_name" --file="$path_out"
      ;;
    esac

    notify_saved 1> "/dev/null" 2> "/dev/null" & disown

    printf '%s' "$path_out" | wl-copy
  }

  case "${1:-""}" in
    "--all")
      not_implemented "Wayland" "${1:-""}"
    ;;
    "--output")
      record "output"
      exit
    ;;
    "--output-focused")
      not_implemented "Wayland" "${1:-""}"
    ;;
    "--workspace")
      not_implemented "Wayland" "${1:-""}"
    ;;
    "--workspace-focused")
      not_implemented "Wayland" "${1:-""}"
    ;;
    "--window")
      record "window"
      exit
    ;;
    "--window-focused")
      record "window-focused"
      exit
    ;;
    ""|"--area")
      record "area"
      exit
    ;;
    "-h"|"--help")
      echo "$msg_usage"
      exit "0"
    ;;
    *)
      echo "$msg_usage" 1>&2
      exit "1"
    ;;
  esac
fi

if [ "${DISPLAY:-""}" ] && [ -z "${WAYLAND_DISPLAY:-""}" ]; then
  case "${1:-""}" in
    ""|"--all"|"--output"|"--output-focused"|"--workspace"|"--workspace-focused"|"--window"|"--window-focused"|"--area"|"--stop")
      not_implemented "X11" "${1:-""}"
    ;;
    "-h"|"--help")
      echo "$msg_usage"
      exit "0"
    ;;
    *)
      echo "$msg_usage" 1>&2
      exit "1"
    ;;
  esac
fi

case "${1:-""}" in
  "-h"|"--help")
    echo "$msg_usage"
    exit "0"
  ;;
  ""|"--all"|"--output"|"--output-focused"|"--workspace"|"--workspace-focused"|"--window"|"--window-focused"|"--area"|"--stop")
    echo "Must be ran under X11 or Wayland." 1>&2
    exit "2"
  ;;
  *)
    echo "$msg_usage" 1>&2
    exit "1"
  ;;
esac
