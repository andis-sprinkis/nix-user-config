#!/usr/bin/env sh
set -eu
IFS_="$IFS"

script="$(basename "$0")"

help_info="NAME
    ${script} - Show disk utilization.

SYNOPSIS
    ${script} [-f]

DESCRIPTION
    Shows disk utilization.

    -f
        Shows utilization for all devices (including 'tmpfs', 'efivarf', 'run', 'dev').

    -h
        Prints this message.
"

opt_has_f="0"
while getopts fh name; do
  case "$name" in
    "f")
      opt_has_f="1"
    ;;
    "h")
      echo "$help_info"
      exit
    ;;
    "?")
      echo "$help_info" 1>&2
      exit "2"
    ;;
  esac
done

data="$(LC_ALL=C df --output="target,pcent,used,avail,size,source" \
  | column -t -o";" | sed -e 's/\s*\;/\;/g' \
  | tail -n "+2" \
  | sort)"

# TODO: use SIZE to specify bytes instead of kB as the base unit
kb_mb="1024" kb_gb="1048576" kb_tb="1073741824" kb_pb="1099511627776" kb_eb="1125899906842624"

human() {
  if [ "$1" -lt "$kb_mb" ]; then printf "%s KB\n" "$1";  return; fi
  if [ "$1" -lt "$kb_gb" ]; then printf "%s MB\n" "$(echo "scale = 1; ${1} / ${kb_mb}" | bc)"; return; fi
  if [ "$1" -lt "$kb_tb" ]; then printf "%s GB\n" "$(echo "scale = 1; ${1} / ${kb_gb}" | bc)"; return; fi
  if [ "$1" -lt "$kb_pb" ]; then printf "%s TB\n" "$(echo "scale = 1; ${1} / ${kb_tb}" | bc)"; return; fi
  if [ "$1" -lt "$kb_eb" ]; then printf "%s PB\n" "$(echo "scale = 1; ${1} / ${kb_pb}" | bc)"; return; fi
}

mute() {
  printf "\x1b[0;90m%s\x1b[0m\n" "$1"
}

severity_fmt() {
  case "$SEVERITY" in
    "0")
      printf "\x1b[0;32m%s\x1b[0m\n" "$1"
    ;;
    "1")
      printf "\x1b[0;33m%s\x1b[0m\n" "$1"
    ;;
    "2")
      printf "\x1b[0;31m%s\x1b[0m\n" "$1"
    ;;
  esac
}

path_fmt() {
  if [ "$1" = "/" ]; then
    severity_fmt "/"
    return
  fi

  echo "$(mute "${1%/*}")$(severity_fmt "/${1##*/}")"
}

SEVERITY="0"

set_severity() {
  if [ "$1" -ge "90" ]; then
    SEVERITY="2"
    return
  fi

  if [ "$1" -ge "70" ]; then
    SEVERITY="1"
    return
  fi

  SEVERITY="0"
}

sym_smdashl_mute="$(mute "╴")"
sym_angle_up_r_mute="$(mute "└")"
sym_dash_mute="$(mute "─")"
sym_parenl_mute="$(mute "(")"
sym_parenr_mute="$(mute ")")"
sym_bigdash_mute="$(mute "╶╴")"

sym_severity_0="${sym_angle_up_r_mute}${sym_dash_mute}${sym_smdashl_mute}"
sym_severity_1="${sym_angle_up_r_mute}$(SEVERITY="1" severity_fmt "?")${sym_smdashl_mute}"
sym_severity_2="${sym_angle_up_r_mute}$(SEVERITY="2" severity_fmt "!")${sym_smdashl_mute}"

sym_severity() {
  case "$SEVERITY" in
    "0")
      echo "$sym_severity_0"
    ;;
    "1")
      echo "$sym_severity_1"
    ;;
    "2")
      echo "$sym_severity_2"
    ;;
  esac
}

IFS="
"
for line in $data; do
  IFS="$IFS_"

  val_p_dev="$(echo "$line" | cut -d";" -f6)"

  if [ "$opt_has_f" = "0" ]; then
    case "$val_p_dev" in
      "tmpfs"|"efivarfs"|"run"|"dev")
        continue
      ;;
    esac
  fi

  val_use_pcnt="$(echo "$line" | cut -d";" -f2 | cut -d "%" -f1)"
  val_free_pcnt="$((100 - val_use_pcnt))"
  val_p_mount="$(echo "$line" | cut -d";" -f1)"
  val_use_b="$(echo "$line" | cut -d";" -f3)"
  val_free_b="$(echo "$line" | cut -d";" -f4)"
  val_size_b="$(echo "$line" | cut -d";" -f5)"

  set_severity "$val_use_pcnt"

echo "$(path_fmt "$val_p_mount") ${sym_parenl_mute}$(human "$val_size_b")${sym_parenr_mute} $(mute "(${val_p_dev})")
$(sym_severity)$(severity_fmt "${val_free_pcnt}% free") ${sym_parenl_mute}$(severity_fmt "$(human "$val_free_b")")${sym_parenr_mute}${sym_bigdash_mute}$(severity_fmt "${val_use_pcnt}% used") ${sym_parenl_mute}$(severity_fmt "$(human "$val_use_b")")${sym_parenr_mute}"
done
IFS="$IFS_"
