#!/usr/bin/env sh
set -eu

FPATH_INPUT="$1"
FPATH="$(set +e; readlink -f "$FPATH_INPUT"; set -e)"

print_stat() {
  echo "----"
  if [ -L "$FPATH_INPUT" ] ; then
    if [ -e "$FPATH" ]; then
      stat "$FPATH_INPUT"
      echo
      stat "$FPATH"
    else
      stat "$FPATH_INPUT"
    fi
  else
    stat "$FPATH"
  fi
}

print_symlink() {
  if [ -L "$FPATH_INPUT" ] ; then
    if [ ! -e "$FPATH" ] ; then
      echo "Broken symbolic link of ${FPATH}
"
      print_stat
      exit
    fi

    echo "Symbolic link of ${FPATH}"
  fi
}

print_symlink

MIME="$(file --mime-type --brief "$FPATH")"
BRIEF="$(file --brief "$FPATH")"

W_CHR="${2:-""}"
H_CHR="${3:-""}"
FPATH_THUMB=""

is_exec() {
  [ "$(command -v "$1")" ]
}

thumb_cache_create() {
  dir_cache_thumb="${XDG_CACHE_HOME:-$HOME/.cache}/previewer/thumbnails"

  if [ ! -d "$dir_cache_thumb" ]; then
    mkdir -p "$dir_cache_thumb"
  fi

  FPATH_THUMB="${dir_cache_thumb}/$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$FPATH" | sha256sum | cut -d" " -f1)"
}

print_util_not_found() {
  echo "$(basename "$0"): '${1}' utility not found."
}

print_mime() {
  if [ -r "$FPATH" ]; then
    echo "$MIME" "(${BRIEF})"
  else
    echo "$MIME"
  fi
}

print_mime_newlines() {
  if [ -r "$FPATH" ]; then
    newlines="$(wc -l "$FPATH" | cut -d" " -f1)"
    echo "$MIME" "(${newlines} lines, ${BRIEF})"
  else
    echo "$MIME"
  fi
}

print_mediainfo() {
  if ! is_exec "mediainfo"; then
    print_util_not_found "mediainfo"
    return
  fi

  mediainfo "$FPATH" | head -n -2 | sed -e 's/ \+: /: /g' -e '/^General$/d'
}

print_chafa() {
  if ! is_exec "chafa"; then
    print_util_not_found "chafa"
    return
  fi

  lines="$(tput lines)"
  columns="$(tput cols)"

  if [ -f "$1" ]; then
    chafa \
      --format "symbols" \
      --font-ratio "1/2" \
      --animate "off" \
      --polite "on" \
      --work "1" \
      -s "${W_CHR:-"$columns"}x${H_CHR:-"$lines"}" \
      "$1"
  fi
}

print_als_zip() {
  if ! is_exec "als"; then
    print_util_not_found "als"
    return
  fi

  als --format=zip -- "$FPATH"
}

case "$MIME" in
  application/eps|application/pdf|application/postscript|application/x-eps|image/x-eps)
    print_mime_newlines

    thumb_cache_create

    if [ ! -f "${FPATH_THUMB}.jpg" ]; then
      if ! is_exec "pdftoppm"; then
        print_util_not_found "pdftoppm"
      else
        pdftoppm -jpeg -jpegopt quality=50 -f "1" -singlefile "$1" "$FPATH_THUMB"
      fi
    fi

    print_chafa "${FPATH_THUMB}.jpg"

    echo

    if ! is_exec "pdfinfo"; then
      print_util_not_found "pdfinfo"
    else
      pdfinfo "$FPATH"

      echo
    fi

    if ! is_exec "pdftotext"; then
      print_util_not_found "pdftotext"
    else
      pdftotext -l "2" -nopgbrk -q -- "$FPATH" -
    fi
  ;;
  image/vnd.djvu*)
    print_mime_newlines

    thumb_cache_create

    if [ ! -f "${FPATH_THUMB}.jpg" ]; then
      if ! is_exec "ddjvu"; then
        print_util_not_found "ddjvu"
      elif ! is_exec "magick"; then
        print_util_not_found "magick"
      else
        ddjvu -format=ppm -page=1 "$1" | magick "-" "${FPATH_THUMB}.jpg"
      fi
    fi

    print_chafa "${FPATH_THUMB}.jpg"
  ;;
  application/epub+zip|application/java-archive|*openxmlformats-officedocument*)
    print_mime

    print_als_zip
  ;;
  application/bzip*|application/gzip|application/vnd.rar|application/x-7z-compressed|application/x-rar|application/x-tar|application/x-xz|application/zip)
    print_mime

    print_mediainfo

    echo

    if ! is_exec "als"; then
      print_util_not_found "als"
    else
      if [ "$MIME" = "application/x-7z-compressed" ]; then
        set +e
        als --format-option=-p="" -- "$FPATH"
        set -e
      else
        als -- "$FPATH"
      fi
    fi
  ;;
  image/*)
    print_mime

    print_chafa "$FPATH"

    echo

    print_mediainfo
  ;;
  video/*|application/x-ogm-video)
    print_mime

    thumb_cache_create

    if [ ! -f "${FPATH_THUMB}.jpg" ]; then
      if ! is_exec "ffmpegthumbnailer"; then
        print_util_not_found "ffmpegthumbnailer"
      else
        ffmpegthumbnailer -i "$1" -o "${FPATH_THUMB}.jpg" -s "0" -q "5"
      fi
    fi

    print_chafa "${FPATH_THUMB}.jpg"

    echo

    print_mediainfo
  ;;
  *opendocument*)
    print_mime

    if ! is_exec "odt2txt"; then
      print_util_not_found "odt2txt"
    else
      odt2txt "$FPATH"
    fi

    echo

    print_als_zip
  ;;
  audio/mpeg)
    print_mime

    print_mediainfo

    echo

    if ! is_exec "mpg123-id3dump"; then
      print_util_not_found "mpg123-id3dump"
    else
      mpg123-id3dump -- "$FPATH"
    fi
  ;;
  audio/*|application/mxf|application/ogg|application/sdp|application/smil|application/streamingmedia|application/vnd.apple.mpegurl|application/vnd.ms-asf|application/vnd.rn-realmedia-vbr|application/vnd.rn-realmedia|application/x-cue|application/x-extension-m4a|application/x-extension-mp4|application/x-matroska|application/x-mpegurl|application/x-ogg|application/x-ogm-audio|application/x-ogm|application/x-shorten|application/x-smil|application/x-streamingmedia)
    print_mime

    print_mediainfo
  ;;
  application/vnd.sqlite*)
    print_mime

    if ! is_exec "sqlite3"; then
      print_util_not_found "sqlite3"
    else
      tables="$(set +e; sqlite3 "$FPATH" '.tables'; set -e)"

      if [ "${tables:-""}" ]; then
        echo ".tables:
${tables}
"
      fi
    fi

    strings "$FPATH"
  ;;
  application/x-executable|application/x-object)
    print_mime

    if ! is_exec "readelf"; then
      print_util_not_found "readelf"
    else
      readelf -a "$FPATH"
    fi
  ;;
  inode/directory)
    print_mime

    is_macos=""
    case "$(uname)" in
      "Darwin")
        is_macos="1"
      ;;
    esac

    if [ -z "$is_macos" ] || [ "${HAS_BREW_GNUBIN:-""}" ]; then
      ls -lahAFNX --color=always --group-directories-first --time-style=long-iso "$FPATH"
    else
      ls -la "$FPATH"
    fi
  ;;
  inode/*)
    print_mime
  ;;
  application/octet-stream)
    print_mime
    if ! is_exec "strings"; then
      print_util_not_found "strings"
    else
      strings "$FPATH"
    fi

    bytes="1048576"

    echo "

First ${bytes} bytes:"

    if ! is_exec "hexdump"; then
      print_util_not_found "hexdump"
    else
      hexdump --color=always --canonical --length "$bytes" "$FPATH"
    fi
  ;;
  application/x-bittorrent|application/x-lz4+json)
    print_mime
  ;;
  *)
    print_mime_newlines

    if [ -r "$FPATH" ]; then
      if ! is_exec "bat"; then
        print_util_not_found "bat"
      else
        bat --color=always --style=plain -- "$FPATH"
      fi
    fi
  ;;
esac

# print_stat

exit "0"
