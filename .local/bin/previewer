#!/usr/bin/env sh
set -eu

FPATH_INPUT="$1"
FPATH="$(set +e; readlink -f "$FPATH_INPUT"; set -e)"

MIME="$(file --mime-type --brief "$FPATH")"
BRIEF="$(file --brief "$FPATH")"

W_CHR="${2:-""}"
H_CHR="${3:-""}"
FPATH_THUMB=""

find_util() {
  if ! command -v "$1" 1>/dev/null 2>/dev/null; then
    echo "$(basename "$0"): '${1}' utility not found."
    return "1"
  fi
}

thumb_cache_create() {
  dir_cache_thumb="${XDG_CACHE_HOME:-$HOME/.cache}/previewer/thumbnails"

  if [ ! -d "$dir_cache_thumb" ]; then
    if mkdir -p "$dir_cache_thumb"; then
      FPATH_THUMB="${dir_cache_thumb}/$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$FPATH" | sha256sum | cut -d" " -f1)"
      return "0"
    fi
  else
    FPATH_THUMB="${dir_cache_thumb}/$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$FPATH" | sha256sum | cut -d" " -f1)"
    return "0"
  fi

  return "1"
}

print_stat() {
  if [ -L "$FPATH_INPUT" ] ; then
    if [ -e "$FPATH" ]; then
      stat "$FPATH_INPUT"
      echo
      stat "$FPATH"
    else
      stat "$FPATH_INPUT"
    fi
  else
    stat "$FPATH"
  fi
}

print_symlink() {
  if [ -L "$FPATH_INPUT" ]; then
    if [ ! -e "$FPATH" ]; then
      printf "\x1b[0;31;1m%s\x1b[0m\n%s\n\n" "Broken symbolic link:" "${FPATH}"
      print_stat
      exit
    fi

    printf "\x1b[0;1m%s\x1b[0m\n%s\n\n" "Symbolic link:" "${FPATH}"
  fi
}

print_hardlink() {
  links_count="$(stat -c '%h' -- "$FPATH")"

  if [ "$links_count" -gt "1" ]; then
    echo "${links_count} hard links"
  fi
}

print_strings() {
  if find_util "strings"; then
    strings "$FPATH"
  else
    return "1"
  fi
}

print_mediainfo() {
  if find_util "mediainfo"; then
    mediainfo "$FPATH" | head -n -2 | sed -e 's/ \+: /: /g' -e '/^General$/d'
  else
    return "1"
  fi
}

print_chafa() {
  if find_util "chafa"; then
    lines="$(tput lines)"
    columns="$(tput cols)"

    if [ -f "$1" ]; then
      chafa \
        --format "symbols" \
        --font-ratio "1/2" \
        --animate "off" \
        --polite "on" \
        --work "1" \
        -s "${W_CHR:-"$columns"}x${H_CHR:-"$lines"}" \
        "$1"
    fi
  else
    return "1"
  fi
}

print_als() {
  if find_util "als"; then
    als --format="${1}" -- "$FPATH"
  else
    return "1"
  fi
}

print_bat() {
  if find_util "bat"; then
    bat --color=always --style=plain -- "$FPATH"
  else
    return "1"
  fi
}

print_mime() {
  if [ -r "$FPATH" ]; then
    echo "$MIME" "(${BRIEF})"
  else
    echo "$MIME"
  fi
}

print_mime_newlines() {
  if [ -r "$FPATH" ]; then
    echo "$MIME" "($(wc -l "$FPATH" | cut -d" " -f1) lines, ${BRIEF})"
  else
    echo "$MIME"
  fi
}

print_symlink
print_hardlink

case "$MIME" in
  application/eps|application/pdf|application/postscript|application/x-eps|image/x-eps)
    print_mime_newlines

    if thumb_cache_create; then
      if [ ! -f "${FPATH_THUMB}.jpg" ]; then
        if find_util "pdftoppm"; then
          if pdftoppm -jpeg -jpegopt quality=50 -f "1" -singlefile "$1" "$FPATH_THUMB"; then
            print_chafa "${FPATH_THUMB}.jpg"
            echo
          fi
        fi
      else
        print_chafa "${FPATH_THUMB}.jpg"
        echo
      fi
    fi

    if find_util "pdfinfo"; then
      if pdfinfo "$FPATH"; then
        echo
      fi
    fi

    if find_util "pdftotext"; then
      pdftotext -l "2" -nopgbrk -q -- "$FPATH" -
    fi
  ;;
  image/vnd.djvu*)
    print_mime_newlines

    if thumb_cache_create; then
      if [ ! -f "${FPATH_THUMB}.jpg" ]; then
        if find_util "ddjvu" && find_util "magick"; then
          if ddjvu -format=ppm -page=1 "$1" | magick "-" "${FPATH_THUMB}.jpg"; then
            print_chafa "${FPATH_THUMB}.jpg"
          fi
        fi
      else
        print_chafa "${FPATH_THUMB}.jpg"
      fi
    fi
  ;;
  application/zip|application/epub+zip|application/java-archive|*openxmlformats-officedocument*)
    print_mime
    print_als "zip"
  ;;
  "application/x-compressed-tar")
    print_mime
    print_als "tar+gzip"
  ;;
  "application/x-bzip1-compressed-tar")
    print_mime
    print_als "tar+bzip"
  ;;
  "application/x-bzip2-compressed-tar")
    print_mime
    print_als "tar+bzip2"
  ;;
  "application/x-tarz")
    print_mime
    print_als "tar+compress"
  ;;
  "application/x-tzo")
    print_mime
    print_als "tar+lzop"
  ;;
  "application/x-lzip-compressed-tar"|"application/x-lzma-compressed-tar")
    print_mime
    print_als "tar+lzip"
  ;;
  "application/x-xz-compressed-tar")
    print_mime
    print_als "tar+xz"
  ;;
  "application/x-tar")
    print_mime
    print_als "tar"
  ;;
  "application/vnd.rar")
    print_mime
    print_als "rar"
  ;;
  "application/x-lha")
    print_mime
    print_als "lha"
  ;;
  "application/x-ace")
    print_mime
    print_als "ace"
  ;;
  "application/x-archive")
    print_mime
    print_als "ar"
  ;;
  "application/x-arj")
    print_mime
    print_als "arj"
  ;;
  "application/vnd.ms-cab-compressed")
    print_mime
    print_als "cab"
  ;;
  "application/x-cpio")
    print_mime
    print_als "cpio"
  ;;
  "application/x-7z-compressed")
    print_mime

    if find_util "als"; then
      # Passing an empty password to avoid a lock-up.
      set +e; als --format=7z --format-option=-p="" -- "$FPATH"; set -e
    fi
  ;;
  application/gzip|application/x-bzip1|application/x-bzip2|application/x-compress|application/x-lzma|application/x-lzop|application/x-lzip|application/x-xz|application/x-lrzip|application/x-alz)
    # Archive types that 'als' recognizes, but cannot list.
    print_mime
  ;;
  image/*)
    print_mime

    if print_chafa "$FPATH"; then
      echo
    fi

    print_mediainfo
  ;;
  video/*|application/x-ogm-video)
    print_mime

    if thumb_cache_create; then
      if [ ! -f "${FPATH_THUMB}.jpg" ]; then
        if find_util "ffmpegthumbnailer"; then
          if ffmpegthumbnailer -i "$1" -o "${FPATH_THUMB}.jpg" -s "0" -q "5"; then
            if print_chafa "${FPATH_THUMB}.jpg"; then
              echo
            fi
          fi
        fi
      else
        if print_chafa "${FPATH_THUMB}.jpg"; then
          echo
        fi
      fi
    fi

    print_mediainfo
  ;;
  *opendocument*)
    print_mime

    if find_util "odt2txt"; then
      odt2txt "$FPATH"
      echo
    fi

    print_als "zip"
  ;;
  audio/mpeg)
    print_mime

    if print_mediainfo; then
      echo
    fi

    if find_util "mpg123-id3dump"; then
      mpg123-id3dump -- "$FPATH"
    fi
  ;;
  audio/*|application/mxf|application/ogg|application/sdp|application/smil|application/streamingmedia|application/vnd.apple.mpegurl|application/vnd.ms-asf|application/vnd.rn-realmedia-vbr|application/vnd.rn-realmedia|application/x-cue|application/x-extension-m4a|application/x-extension-mp4|application/x-matroska|application/x-mpegurl|application/x-ogg|application/x-ogm-audio|application/x-ogm|application/x-shorten|application/x-smil|application/x-streamingmedia)
    print_mime

    print_mediainfo
  ;;
  application/vnd.sqlite*)
    print_mime

    if find_util "sqlite3"; then
      tables="$(set +e; sqlite3 "$FPATH" '.tables'; set -e)"

      if [ "${tables:-""}" ]; then
        echo ".tables:
${tables}
"
      fi
    fi

    print_strings
  ;;
  application/x-executable|application/x-pie-executable|application/x-object)
    print_mime

    if find_util "readelf"; then
      readelf -a "$FPATH"
    fi
  ;;
  inode/directory)
    print_mime

    # shellcheck disable=SC2010
    if ls --version 2> "/dev/null" | grep -q "GNU"; then
      ls -lahAFNX --color=always --group-directories-first --time-style=long-iso "$FPATH"
    else
      ls -la "$FPATH"
    fi
  ;;
  inode/*)
    print_mime
    print_stat
  ;;
  application/octet-stream|application/vnd.microsoft.portable-executable|application/x-dosexec*)
    print_mime
    print_strings

    if find_util "hexdump"; then
      bytes="1048576"

      echo "

First ${bytes} bytes or less:"

      hexdump -C -n "$bytes" "$FPATH"
    fi
  ;;
  application/vnd.debian.binary-package|application/x-rpm)
    print_mime

    if als -- "$FPATH"; then
      echo
    fi

    print_strings
  ;;
  application/x-bittorrent|application/x-lz4+json)
    print_mime
    print_strings
  ;;
  application/x-iso9660-image)
    print_mime

    if find_util "iso-info"; then
      iso-info --no-header -U "$FPATH"
      echo
      iso-info --no-header -l "$FPATH"
    fi
  ;;
  text/x-ssh-public-key|application/x-pem-file)
    print_mime_newlines

    if find_util "ssh-keygen"; then
      ssh-keygen -lv -f "$FPATH"
    fi

    print_bat
  ;;
  *)
    print_mime_newlines

    if [ -r "$FPATH" ]; then
      print_bat
    fi
  ;;
esac

exit "0"
