#!/usr/bin/env sh
set -eu

script="$(basename "$0")"
lines="$(tput lines)"
columns="$(tput cols)"

fpath="$(readlink -f "$1")"
w_chr="${2:-"$columns"}"
h_chr="${3:-"$lines"}"
FPATH_THUMB=""

is_exec() { [ "$(command -v "$1")" ]; }

thumb_cache_create() {
  dir_cache_thumb="${XDG_CACHE_HOME:-$HOME/.cache}/previewer/thumbnails"

  if [ ! -d "$dir_cache_thumb" ]; then
    mkdir -p "$dir_cache_thumb"
  fi

  FPATH_THUMB="${dir_cache_thumb}/$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$fpath" | sha256sum | cut -d" " -f1)"
}

print_util_not_found() {
  echo "${script}: '${1}' utility not found."
}

print_mediainfo() {
  if ! is_exec "mediainfo"; then
    print_util_not_found "mediainfo"

    return
  fi

  mediainfo "$fpath" | head -n -2 | sed -e 's/ \+: /: /g' -e '/^General$/d'
}

print_chafa() {
  if ! is_exec "chafa"; then
    print_util_not_found "chafa"

    return
  fi

  if [ -f "$2" ]; then
    chafa --format "symbols" --font-ratio "1/2" --animate "off" --polite "on" --work "1" -s "$1" "$2"
  fi
}

mime="$(file --mime-type --brief "$fpath")"
brief="$(file --brief "$fpath")"

case "$mime" in
  application/eps|application/pdf|application/postscript|application/x-eps|image/x-eps)
    newlines="$(wc -l "$fpath" | cut -d" " -f1)"
    echo "$mime" "(${newlines} lines, ${brief})"

    thumb_cache_create

    if [ ! -f "${FPATH_THUMB}.jpg" ]; then
      if ! is_exec "pdftoppm"; then
        print_util_not_found "pdftoppm"
      else
        pdftoppm -jpeg -jpegopt quality=50 -f "1" -singlefile "$1" "$FPATH_THUMB"
      fi
    fi

    print_chafa "${w_chr}x${h_chr}" "${FPATH_THUMB}.jpg"

    echo

    if ! is_exec "pdfinfo"; then
      print_util_not_found "pdfinfo"
    else
      pdfinfo "$fpath"

      echo
    fi

    if ! is_exec "pdftotext"; then
      print_util_not_found "pdftotext"
    else
      pdftotext -l "2" -nopgbrk -q -- "$fpath" -
    fi
  ;;
  image/vnd.djvu*)
    newlines="$(wc -l "$fpath" | cut -d" " -f1)"
    echo "$mime" "(${newlines} lines, ${brief})"

    thumb_cache_create

    if [ ! -f "${FPATH_THUMB}.jpg" ]; then
      if ! is_exec "ddjvu"; then
        print_util_not_found "ddjvu"
      elif ! is_exec "magick"; then
        print_util_not_found "magick"
      else
        ddjvu -format=ppm -page=1 "$1" | magick "-" "${FPATH_THUMB}.jpg"
      fi
    fi

    print_chafa "${w_chr}x${h_chr}" "${FPATH_THUMB}.jpg"
  ;;
  application/bzip*|application/gzip|application/vnd.rar|application/x-7z-compressed|application/x-rar|application/x-tar|application/x-xz|application/zip)
    echo "$mime" "(${brief})"

    print_mediainfo

    echo

    if ! is_exec "als"; then
      print_util_not_found "als"
    else
      if [ "$mime" = "application/x-7z-compressed" ]; then
        set +e
        als --format-option=-p="" -- "$fpath"
        set -e
      else
        als -- "$fpath"
      fi
    fi
  ;;
  image/*)
    echo "$mime" "(${brief})"

    print_chafa "${w_chr}x${h_chr}" "$fpath"

    echo

    print_mediainfo
  ;;
  video/*|application/x-ogm-video)
    echo "$mime" "(${brief})"

    thumb_cache_create

    if [ ! -f "${FPATH_THUMB}.jpg" ]; then
      if ! is_exec "ffmpegthumbnailer"; then
        print_util_not_found "ffmpegthumbnailer"
      else
        ffmpegthumbnailer -i "$1" -o "${FPATH_THUMB}.jpg" -s "0" -q "5"
      fi
    fi

    print_chafa "${w_chr}x${h_chr}" "${FPATH_THUMB}.jpg"

    echo

    print_mediainfo
  ;;
  *opendocument*)
    echo "$mime" "(${brief})"

    if ! is_exec "odt2txt"; then
      print_util_not_found "odt2txt"
    else
      odt2txt "$fpath"
    fi
  ;;
  audio/mpeg)
    echo "$mime" "(${brief})"

    print_mediainfo

    echo

    if ! is_exec "mpg123-id3dump"; then
      print_util_not_found "mpg123-id3dump"
    else
      mpg123-id3dump -- "$fpath"
    fi
  ;;
  audio/*|application/mxf|application/ogg|application/sdp|application/smil|application/streamingmedia|application/vnd.apple.mpegurl|application/vnd.ms-asf|application/vnd.rn-realmedia-vbr|application/vnd.rn-realmedia|application/x-cue|application/x-extension-m4a|application/x-extension-mp4|application/x-matroska|application/x-mpegurl|application/x-ogg|application/x-ogm-audio|application/x-ogm|application/x-shorten|application/x-smil|application/x-streamingmedia)
    echo "$mime" "(${brief})"

    print_mediainfo
  ;;
  application/vnd.sqlite*)
    echo "$mime" "(${brief})"

    if ! is_exec "sqlite3"; then
      print_util_not_found "sqlite3"
    else
      sqlite3 "$fpath" '.tables'
    fi
  ;;
  application/x-executable|application/x-object)
    echo "$mime" "(${brief})"

    if ! is_exec "readelf"; then
      print_util_not_found "readelf"
    else
      readelf -a "$fpath"
    fi
  ;;
  inode/directory)
    echo "$mime" "(${brief})"

    is_macos=""
    case "$(uname)" in
      "Darwin")
        is_macos="1"
      ;;
    esac

    if [ -z "$is_macos" ] || [ "${HAS_BREW_GNUBIN:-""}" ]; then
      ls -lahAFNX --color=always --group-directories-first --time-style=long-iso "$fpath"
    else
      ls -la "$fpath"
    fi

  ;;
  application/octet-stream)
    echo "$mime" "(${brief})"

    if ! is_exec "hexdump"; then
      print_util_not_found "hexdump"
    else
      hexdump --color=always --canonical --length "134217728" "$fpath"
    fi
  ;;
  application/x-bittorrent|inode/socket)
    echo "$mime" "(${brief})"
  ;;
  *)
    newlines="$(wc -l "$fpath" | cut -d" " -f1)"
    echo "$mime" "(${newlines} lines, ${brief})"

    if ! is_exec "bat"; then
      print_util_not_found "bat"
    else
      bat --color=always --style=plain -- "$fpath"
    fi
  ;;
esac

exit "0"
