#!/usr/bin/env sh
set -eu

direction="${1:-""}"

if [ -z "$direction" ]; then
  exit "1"
fi

wm="${WAYLAND_DISPLAY:+"sway"}"
wm="${wm:-"i3"}"

# TODO: fix i3 issues (works under Sway)
# - i3: .rect.x, .rect.y are the same coordinates as .deco_rect.x, .deco_rect.y ?

# Window manager data

ws="$(
  i3-msg -t "get_workspaces" | jq -r \
  ".[] | select(.focused == true) | .rect.x, .rect.y, .rect.width, .rect.height, .output"
)"

ws_rect_x="$(         echo "$ws" | sed  "1q;d")"
ws_rect_y="$(         echo "$ws" | sed  "2q;d")"
ws_rect_width="$(     echo "$ws" | sed  "3q;d")" 
ws_rect_height="$(    echo "$ws" | sed  "4q;d")"
ws_output="$(         echo "$ws" | sed  "5q;d")"

out_rect="$(
  i3-msg -t "get_outputs"    | jq -r \
  ".[] | select(.name == \"${ws_output}\").rect | .x, .y, .width, .height"
)"

out_rect_x="$(       echo "$out_rect" | sed  "1q;d")"
out_rect_y="$(       echo "$out_rect" | sed  "2q;d")"
out_rect_width="$(   echo "$out_rect" | sed  "3q;d")"
out_rect_height="$(  echo "$out_rect" | sed  "4q;d")"

win="$(
  i3-msg -t "get_tree"       | jq -r \
  ".. | select(.type?) | select(.focused == true) | .type, .floating, .fullscreen_mode, .rect.x, .rect.y, .rect.width, .rect.height, .window_rect.x, .window_rect.y, .window_rect.width, .window_rect.height, .deco_rect.x, .deco_rect.y, .deco_rect.width, .deco_rect.height, .geometry.x, .geometry.y, .geometry.width, .geometry.height"
)"

win_type="$(              echo "$win" | sed  "1q;d")"
win_floating="$(          echo "$win" | sed  "2q;d")" # i3
win_fullscreen_mode="$(   echo "$win" | sed  "3q;d")"
win_rect_x="$(            echo "$win" | sed  "4q;d")"
win_rect_y="$(            echo "$win" | sed  "5q;d")"
win_rect_width="$(        echo "$win" | sed  "6q;d")"
win_rect_height="$(       echo "$win" | sed  "7q;d")"
# win_window_rect_x="$(     echo "$win" | sed  "8q;d")"
# win_window_rect_y="$(     echo "$win" | sed  "9q;d")"
# win_window_rect_width="$( echo "$win" | sed  "10q;d")"
# win_window_rect_height="$(echo "$win" | sed "11q;d")"
# win_deco_rect_x="$(       echo "$win" | sed "12q;d")"
# win_deco_rect_y="$(       echo "$win" | sed "13q;d")"
# win_deco_rect_width="$(   echo "$win" | sed "14q;d")"
win_deco_rect_height="$(  echo "$win" | sed "15q;d")"

# Window moving properties

move_step_x="$((ws_rect_width / 5))"
move_step_y="$((ws_rect_height / 5))"
ws_edge_thres_x="$move_step_x"
ws_edge_thres_y="$move_step_y"

# Window properties

win_height() {
  c_win_height="${c_win_height:-"$((win_rect_height + win_deco_rect_height))"}"
  echo "$c_win_height"
}

win_width() {
  c_win_width="${c_win_width:-"$win_rect_width"}"
  echo "$c_win_width"
}

win_edge_left() {
  c_win_rect_x="${c_win_rect_x:-"$win_rect_x"}"
  echo "$c_win_rect_x"
}

win_edge_right() {
  c_win_edge_right="${c_win_edge_right:-"$(("${c_win_edge_left:-"$(win_edge_left)"}" + "${c_win_width:-"$(win_width)"}"))"}"
  echo "$c_win_edge_right"
}

win_edge_top() {
  c_win_edge_top="${c_win_edge_top:-"$((win_rect_y - win_deco_rect_height))"}"
  echo "$c_win_edge_top"
}

win_edge_bottom() {
  c_win_edge_bottom="${c_win_edge_bottom:-"$(("${c_win_edge_top:-"$(win_edge_top)"}" + "${c_win_height:-"$(win_height)"}"))"}"
  echo "$c_win_edge_bottom"
}

# Output properties

out_height() {
  c_out_height="${out_height:-"$out_rect_height"}"
  echo "$c_out_height"
}

out_width() {
  c_out_width="${c_out_width:-"$out_rect_width"}"
  echo "$c_out_width"
}

out_edge_left() {
  c_out_edge_left="${c_out_edge_left:-"$out_rect_x"}"
  echo "$c_out_edge_left"
}

out_edge_right() {
  c_out_edge_right="${c_out_edge_right:-"$(("${c_out_edge_left:-"$(out_edge_left)"}" + "${c_out_width:-"$(out_width)"}"))"}"
  echo "$c_out_edge_right"
}

out_edge_top() {
  c_out_edge_top="${c_out_edge_top:-"$out_rect_y"}"
  echo "$c_out_edge_top"
}

out_edge_bottom() {
  c_out_edge_bottom="${c_out_edge_bottom:-"$(("${c_out_edge_top:-"$(out_edge_top)"}" + "${c_out_height:-"$(out_height)"}"))"}"
  echo "$c_out_edge_bottom"
}

# Workspace properties

ws_height() {
  c_ws_height="${c_ws_height:-"$ws_rect_height"}"
  echo "$c_ws_height"
}

ws_width() {
  c_ws_width="${c_ws_width:-"$ws_rect_width"}"
  echo "$c_ws_width"
}

ws_edge_left() {
  c_ws_edge_left="${c_ws_edge_left:-"$ws_rect_x"}"
  echo "$c_ws_edge_left"
}

ws_edge_right() {
  c_ws_edge_right="${c_ws_edge_right:-"$(("${c_ws_edge_left:-"$(ws_edge_left)"}" + "${c_ws_width:-"$(ws_width)"}"))"}"
  echo "$c_ws_edge_right"
}

ws_edge_top() {
  c_ws_edge_top="${c_ws_edge_top:-"$ws_rect_y"}"
  echo "$c_ws_edge_top"
}

ws_edge_bottom() {
  c_ws_edge_bottom="${c_ws_edge_bottom:-"$(("${c_ws_edge_top:-"$(ws_edge_top)"}" + "${c_ws_height:-"$(ws_height)"}"))"}"
  echo "$c_ws_edge_bottom"
}

ws_edge_thres_left() {
  c_ws_edge_thres_left="${c_ws_edge_thres_left:-"$(("${c_ws_edge_left:-"$(ws_edge_left)"}" + ws_edge_thres_x))"}"
  echo "$c_ws_edge_thres_left"
}

ws_edge_thres_right() {
  c_ws_edge_thres_right="${c_ws_edge_thres_right:-"$(("${c_ws_edge_right:-"$(ws_edge_right)"}" - ws_edge_thres_x))"}"
  echo "$c_ws_edge_thres_right"
}

ws_edge_thres_top() {
  c_ws_edge_thres_top="${c_ws_edge_thres_top:-"$(("${c_ws_edge_top:-"$(ws_edge_top)"}" + ws_edge_thres_y))"}"
  echo "$c_ws_edge_thres_top"
}

ws_edge_thres_bottom() {
  c_ws_edge_thres_bottom="${c_ws_edge_thres_bottom:-"$(("${c_ws_edge_bottom:-"$(ws_edge_bottom)"}" - ws_edge_thres_y))"}"
  echo "$c_ws_edge_thres_bottom"
}

# Window X and Y coordinate translations

win_x_snaps_left() {
  echo "${c_ws_edge_left:-"$(ws_edge_left)"}"
}

win_x_snaps_right() {
  echo "$(("${c_ws_edge_right:-"$(ws_edge_right)"}" - "${c_win_width:-"$(win_width)"}"))"
}

win_y_snaps_top() {
  echo "${c_ws_edge_top:-"$(ws_edge_top)"}"
}

win_y_snaps_bottom() {
  echo "$(("${c_ws_edge_bottom:-"$(ws_edge_bottom)"}" - "${c_ws_win_height:-"$(win_height)"}"))"
}

win_x_stays() {
  echo "${c_win_edge_left:-"$(win_edge_left)"}"
}

win_y_stays() {
  echo "${c_win_edge_top:-"$(win_edge_top)"}"
}

win_x_snaps_out_right() {
  echo "${c_out_edge_right:-"$(out_edge_right)"}"
}

win_x_snaps_out_left() {
  echo "$(("${c_out_edge_left:-$(out_edge_left)}" - "${c_win_width:-"$(win_width)"}"))"
}

win_y_snaps_out_top() {
  echo "$(("${c_out_edge_top:-"$(out_edge_top)"}" - "${c_win_height:-"$(win_height)"}"))"
}

win_y_snaps_out_bottom() {
  echo "${c_out_edge_bottom:-"$(out_edge_bottom)"}"
}

win_x_moves_left() {
  echo "$(("${c_win_edge_left:-"$(win_edge_left)"}" - move_step_x))"
}

win_x_moves_right() {
  echo "$(("${c_win_edge_left:-"$(win_edge_left)"}" + move_step_x))"
}

win_y_moves_up() {
  echo "$(("${c_win_edge_top:-"$(win_edge_top)"}" - move_step_y))"
}

win_y_moves_down() {
  echo "$(("${c_win_edge_top:-"$(win_edge_top)"}" + move_step_y))"
}

# Window manager edge snap actions

win_snaps_top() {
  exec i3-msg -q "move absolute position $(win_x_stays) $(win_y_snaps_top)"
}

win_snaps_bottom() {
  exec i3-msg -q "move absolute position $(win_x_stays) $(win_y_snaps_bottom)"
}

win_snaps_left() {
  exec i3-msg -q "move absolute position $(win_x_snaps_left) $(win_y_stays)"
}

win_snaps_right() {
  exec i3-msg -q "move absolute position $(win_x_snaps_right) $(win_y_stays)"
}

win_snaps_out_top() {
  exec i3-msg -q "move absolute position $(win_x_stays) $(win_y_snaps_out_top)"
}

win_snaps_out_bottom() {
  exec i3-msg -q "move absolute position $(win_x_stays) $(win_y_snaps_out_bottom)"
}

win_snaps_out_left() {
  exec i3-msg -q "move absolute position $(win_x_snaps_out_left) $(win_y_stays)"
}

win_snaps_out_right() {
  exec i3-msg -q "move absolute position $(win_x_snaps_out_right) $(win_y_stays)"
}

# Window moving actions

win_moves_down() {
  exec i3-msg -q "move absolute position $(win_x_stays) $(win_y_moves_down)"
}

win_moves_up() {
  exec i3-msg -q "move absolute position $(win_x_stays) $(win_y_moves_up)"
}

win_moves_left() {
  exec i3-msg -q "move absolute position $(win_x_moves_left) $(win_y_stays)"
}

win_moves_right() {
  exec i3-msg -q "move absolute position $(win_x_moves_right) $(win_y_stays)"
}

win_stays() {
  exec i3-msg -q "floating enable; move absolute position $(win_x_stays) $(win_y_stays)"
}

# Main

if [ "$win_fullscreen_mode" != "0" ]; then
  exec i3-msg -q "fullscreen disable; floating enable; move absolute position $(win_x_stays) $(win_y_stays)"
fi

case "$wm" in
  "sway")
    if [ "$win_type" != "floating_con" ]; then
      win_stays
    fi
  ;;
  "i3")
    case "$win_floating" in
      *"_off")
        win_stays
      ;;
    esac
  ;;
esac


case "$direction" in
  "up")
    if [ "${c_win_edge_top:-"$(win_edge_top)"}" -gt "${c_ws_edge_thres_top:-"$(ws_edge_thres_top)"}" ] && [ "${c_win_edge_bottom:-"$(win_edge_bottom)"}" -le "${c_ws_edge_bottom:-"$(ws_edge_bottom)"}" ]; then
      win_moves_up
    fi

    if [ "${c_win_edge_bottom:-"$(win_edge_bottom)"}" -gt "${c_ws_edge_bottom:-"$(ws_edge_bottom)"}" ]; then
      win_snaps_bottom
    fi

    if [ "${c_win_edge_top:-"$(win_edge_top)"}" -le "${c_ws_edge_top:-"$(ws_edge_top)"}" ]; then
      win_snaps_out_top
    fi

    win_snaps_top
  ;;
  "down")
    if [ "${c_win_edge_bottom:-"$(win_edge_bottom)"}" -lt "${c_ws_edge_thres_bottom:-"$(ws_edge_thres_bottom)"}" ] && [ "${c_win_edge_top:-"$(win_edge_top)"}" -ge "${c_ws_edge_top:-"$(ws_edge_top)"}" ]; then
      win_moves_down
    fi

    if [ "${c_win_edge_top:-"$(win_edge_top)"}" -lt "${c_ws_edge_top:-"$(ws_edge_top)"}" ]; then
      win_snaps_top
    fi

    if [ "${c_win_edge_bottom:-"$(win_edge_bottom)"}" -ge "${c_ws_edge_bottom:-"$(ws_edge_bottom)"}" ]; then
      win_snaps_out_bottom
    fi

    win_snaps_bottom
  ;;
  "left")
    if [ "${c_win_edge_left:-"$(win_edge_left)"}" -gt "${c_ws_edge_thres_left:-"$(ws_edge_thres_left)"}" ] && [ "${c_win_edge_right:-"$(win_edge_right)"}" -le "${c_ws_edge_right:-"$(ws_edge_right)"}" ]; then
      win_moves_left
    fi

    if [ "${c_win_edge_right:-"$(win_edge_right)"}" -gt "${c_ws_edge_right:-"$(ws_edge_right)"}" ]; then
      win_snaps_right
    fi

    if [ "${c_win_edge_left:-"$(win_edge_left)"}" -le "${c_ws_edge_left:-"$(ws_edge_left)"}" ]; then
      win_snaps_out_left
    fi

    win_snaps_left
  ;;
  "right")
    if [ "${c_win_edge_right:-"$(win_edge_right)"}" -lt "${c_ws_edge_thres_right:-"$(ws_edge_thres_right)"}" ] && [ "${c_win_edge_left:-"$(win_edge_left)"}" -ge "${c_ws_edge_left:-"$(ws_edge_left)"}" ]; then
      win_moves_right
    fi

    if [ "${c_win_edge_left:-"$(win_edge_left)"}" -lt "${c_ws_edge_left:-"$(ws_edge_left)"}" ]; then
      win_snaps_left
    fi

    if [ "${c_win_edge_right:-"$(win_edge_right)"}" -ge "${c_ws_edge_right:-"$(ws_edge_right)"}" ]; then
      win_snaps_out_right
    fi

    win_snaps_right
  ;;
  *)
    exit "2"
  ;;
esac

